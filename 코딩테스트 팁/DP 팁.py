# 다이나믹 프로그래밍:
# 이미 계산된 작은 문제를 별도의 메모리 영역에 저장해놓고 다시 계산하지 않도록 하는 기법 : 메모이제이션 Memoization == 캐싱 Caching
# Top-Down(탑다운, 하향식, 메모이제이션, 재귀함수) or
# Bottom-Up(보텀업, 상향식, for문) 방식 둘 중 하나로 로직 작성

# dp와 분할 정복(ex 퀵정렬)은 큰 문제를 작은 문제로 나눈다는 것에 공통점이 있지만
# dp는 중복되는 값이 있을 수 있는 것이고 즉, DP_Table의 사용가치가 있는 것이고
# 분할정복(ex 퀵정렬)은 부분문제가 반복적으로 계산되지 않고 쓰이지 않는다.
# -> ex 퀵정렬에서 피벗값은 한번 계산되고 나면 바뀌거나 다시 쓰이지 않는다.

# 점화식 세워야 하고 머리 잘써야한다.
# 어렵다.
# 못하겠으면 빨리 포기하고 다음 문제 가라

# 가장 긴 증가하는 부분 수열(LIS) 문제가 가장 대표적인 DP문제
# 병사 배치하기 예제를 보면 된다
